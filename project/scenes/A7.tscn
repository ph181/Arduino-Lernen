[gd_scene load_steps=4 format=3 uid="uid://ct8fmmat1vop3"]

[ext_resource type="PackedScene" uid="uid://05baa6d7gub5" path="res://scenes/AufgabeBase.tscn" id="1_4h8py"]
[ext_resource type="FontFile" uid="uid://bpy323havmp2c" path="res://fonts/Terminal-Grotesque-master/font.ttf" id="2_q36m1"]
[ext_resource type="Texture2D" uid="uid://i0wsonr8e24q" path="res://sprite/a7/PAP.png" id="3_tjn0x"]

[node name="A7" instance=ExtResource("1_4h8py")]

[node name="Label" parent="task0" index="0"]
text = "Eigene Funktionen schreiben"

[node name="Label2" parent="task0" index="1"]
text = "Schreibe eine eigene Blinkfunktion, bei der ein Blinken dreimal wiederholt wird und die in setup aufgerufen wird. Was passiert, wenn du diese Funktion in loop aufrufst?"

[node name="Sprite" parent="task0" index="3"]
visible = false

[node name="Label" parent="task0/ButtonNext/task00" index="0"]
text = "Musik"

[node name="Label2" parent="task0/ButtonNext/task00" index="1"]
text = "Programmiere dein Lieblingslied. Vielleicht gibt es einen Takt oder einen Refrain, der sich wiederholt? Probiere diesen Teil als Unterfunktion zu schreiben:
"

[node name="Label3" parent="task0/ButtonNext/task00" index="2"]
visible = true
offset_left = 630.0
offset_top = 340.0
offset_right = 922.0
offset_bottom = 880.0
text = "void setup (){
}
void loop (){
...
refrain();
}
void refrain(){
tone(11,220);
delay(200);
}"

[node name="Sprite" parent="task0/ButtonNext/task00" index="3"]
visible = false

[node name="ButtonNext2" parent="task0/ButtonNext/task00" index="6"]
visible = false

[node name="Label" parent="task1" index="0"]
text = "Was macht das Programm?"

[node name="Label2" parent="task1" index="1"]
visible = false

[node name="RichTextLabel" type="RichTextLabel" parent="task1" index="2"]
layout_mode = 0
offset_left = 617.0
offset_top = 221.0
offset_right = 1295.0
offset_bottom = 899.0
theme_override_colors/default_color = Color(0, 0, 0, 1)
theme_override_fonts/normal_font = ExtResource("2_q36m1")
theme_override_font_sizes/normal_font_size = 41
text = "void setup() {
  pinMode(11, OUTPUT);
  pinMode(12, POUTUT);
  pinMode(13, OUTPUT);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
}

void loop() {
  ampelZyklus();
  fussgangerZyklus();
}

void ampelZyklus() {
  digitalWrite(11, HIGH);
  delay(1000);
  digitalWrite(12, HIGH);
  delay(500);
  digitalWrite(11, LOW);
  digitalWrite(12, LOW);
  digitalWrite(13, HIGH);
  delay(1000);
  digitalWrite(13, LOW); }

void fussgangerZyklus() {
  digitalWrite(10, HIGH);
  delay(500);
  digitalWrite(10, LOW);
  digitalWrite(9, HIGH);
  delay(1000);
  digitalWrite(9, LOW);
}"

[node name="Sprite" parent="task1" index="4"]
visible = false

[node name="Label" parent="task2" index="0"]
text = "Eigene Funktionen"

[node name="Label2" parent="task2" index="1"]
offset_bottom = 865.0
text = "Eine Funktion ist ein Block von Programmcode, der einen Namen hat und eine Reihe von Anweisungen beinhaltet, die beim Aufruf der Funktion ausgeführt werden. Die Funktionen void setup() und void loop() wurden bereits erklärt. Es gibt noch weitere eingebaute Funktionen, dazu später. Will man z.B. sich wiederholende Aufgaben vereinfachen schreibt man sie in eigene Funktionen. Zuerst wird der Typ der Funktion definiert, für den Anfang, wird der Funktionstyp 'void' verwendet. Nun wird der Name festgelegt und in Klammern alle Parameter, die der Funktion übergeben werden sollen. 

void funktionsName(parameter) 
{
anweisungen;
}"

[node name="Sprite" parent="task2" index="3"]
visible = false

[node name="ButtonNext" parent="task2" index="5"]
visible = true

[node name="Label" parent="task2/ButtonNext/task00" index="0"]
text = "Der Programmablaufplan (PAP)"

[node name="Label2" parent="task2/ButtonNext/task00" index="1"]
text = "Wenn ein Projekt anfängt unübersichtlich zu werden, kann man sich mit Hilfe der Symbolspraches eines Programmablaufplans Übersicht verschaffen. Die Symbole sind in einer DIN-Norm festgelegt (DIN 66 001) und so für jeden Verständlich, wie ein Universalcode! Hauptsächlich werden die folgenden Elemente verwendet:
"

[node name="Sprite" parent="task2/ButtonNext/task00" index="2"]
position = Vector2(1042, 683)
scale = Vector2(1.59991, 1.59991)
texture = ExtResource("3_tjn0x")

[node name="AnimatedSprite2D" parent="task2/ButtonNext/task00" index="3"]
visible = false
